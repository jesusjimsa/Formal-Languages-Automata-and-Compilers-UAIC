%{
	void yerror(char *s);
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
%}

// Characters
%token O_BRACKETS	C_BRACKETS
%token O_CURLY	C_CURLY
%token O_SQUAREB	C_SUAREB
%token QUOTATION
%token SQUOT
%token EQUAL
%token SEMICOLON S_COMA
%token ADD
%token S_ASTERISK
%token S_INCREMENTO	S_DECREMENTO
%token OPERATION
%token S_NBINARIO
%token S_ASSIGNMENT

// Types and functions
%token S_INTEGER
%token S_CHAR
%token S_VARIABLE
%token S_PARAMETER
%token S_CONSTANTE

// Control statements
%token CS_IF
%token CS_THEN
%token CS_ELSE
%token CS_WHILE
%token CS_FOR
%token CS_AND	CS_OR	CS_EQUAL	CS_DIFFERENT	CS_LESS	CS_GREATER	CS_NOT

// User defined data types
%token S_STRUCT

// Print function
%token S_PRINT

// Others
%token S_MAIN
%token NUM
%token ID
%token STRING
%token P_RESERVATED
%token P_HASH
%token LIBRARIES
%token W_DEFINE

%start START

%%

BEGIN: INCLUDES FUNCIONES;

INCLUDES: INCLUDE
	| INCLUDE INCLUDES
	;
INCLUDE: P_HASH P_RESERVATED S_LESS LIBRARIES S_GREAT
	| P_HASH W_DEFINE ID NUM
	;

FUNCIONES: FUNCION_PRINCIPAL
	| FUNCION FUNCIONES
	;

FUNCION_PRINCIPAL: S_INTEGER S_MAIN O_BRACKETS C_BRACKETS O_CURLY EXPRESIONS C_CURLY
	| S_INTEGER S_MAIN O_BRACKETS MAIN_RESERVATED C_BRACKETS O_CURLY EXPRESIONS C_CURLY
	;

MAIN_RESERVATED: S_INTEGER P_RESERVATED S_COMA S_CHAR S_ASTERISK P_RESERVATED;

FUNCION: S_VARIABLE ID O_BRACKETS C_BRACKETS O_CURLY EXPRESIONS C_CURLY
	| S_VARIABLE ID O_BRACKETS PARAMETERS C_BRACKETS O_CURLY EXPRESIONS C_CURLY
	;

PARAMETERS: VAR_TYPE ID
	| VAR_TYPE S_PARAMETER ID
	| VAR_TYPE ID S_COMA PARAMETERS
	| VAR_TYPE S_PARAMETER ID S_COMA PARAMETERS
	;

EXPRESIONS: DECLARATION_VARIABLES CALL_FUNCTIONS OPERATIONS;

DECLARATION_VARIABLES:VARIABLE
	| VARIABLE DECLARATION_VARIABLES
	;

VARIABLE: VAR_TYPE ID S_EQUAL S_DEFINITION
	| VAR_TYPE ID
	| VAR_TYPE ID S_COMA VARIABLE
	| VAR_TYPE ID S_EQUAL S_DEFINITION S_COMA VARIABLE
	| VAR_TYPE ID S_EQUAL S_DEFINITION
	| VAR_TYPE ID O_SQUAREB NUM C_SQUAREB
	| VAR_TYPE ID O_SQUAREB C_SQUAREB
	;

VAR_TYPE: S_INTEGER
	| S_CONSTANTE S_INTEGER
	| S_CHAR
	| S_CONSTANTE S_CHAR
	;

S_DEFINITION: NUM
	| STRING
	;

CALL_FUNCTIONS: S_VARIABLE ID S_EQUAL FUNCTION_DEFINITION
	| ID S_EQUAL FUNCTION_DEFINITION
	| FUNCTION_DEFINITION
	;

FUNCTION_DEFINITION:ID O_BRACKETS C_BRACKETS
	| ID O_BRACKETS PARAMETERS_WDECLARATION C_BRACKETS
	;
	
PARAMETERS_WDECLARATION: ID S_COMA PARAMETERS_WDECLARATION
	| S_DEFINITION S_COMA PARAMETERS_WDECLARATION
	| ID
	| S_DEFINITION
	;

OPERATIONS: ID S_EQUAL S_DEFINITION
	| ID S_ASSIGNMENT S_NBINARIO
	| ID S_EQUAL ID S_INCREMENTO
	| ID S_EQUAL ID S_DECREMENTO
	| ID S_EQUAL ID S_OPERATION ID
	| ID S_EQUAL ID S_OPERATION S_DEFINITON
	| ID S_EQUAL S_DEFINITION S_OPERATION ID
	| ID S_EQUAL S_DEFINTION S_OPERATION S_DEFINITON
	| ID S_EQUAL S_NBINARIO
	| ID S_EQUAL ID OPERATION S_NBINARIO
	| ID S_EQUAL S_NBINARIO OPERATION ID
	| ID S_EQUAL S_NBINARIO OPERATION S_NBINARIO
	;

ST_IF: CS_IF O_BRACKETS CONDITION C_BRACKETS CS_THEN ST1 SEMICOLON CS_ELSE ST1 SEMICOLON
	| CS_IF O_BRACKETS CONDITION C_BRACKETS CS_THEN ST1 SEMICOLON
	;

ST_WHILE: CS_WHILE O_BRACKETS CONDITION C_BRACKETS O_CURLY ST1 C_CURLY;

ST_FOR: CS_FOR O_BRACKETS ID EQUAL NUM SEMICOLON CONDITION SEMICOLON ID S_INCREMENTO C_BRACKETS O_CURLY ST1 C_CURLY
	| CS_FOR O_BRACKETS ID EQUAL NUM SEMICOLON CONDITION SEMICOLON ID S_DECREMENTO C_BRACKETS O_CURLY ST1 C_CURLY
	| CS_FOR O_BRACKETS ID EQUAL NUM SEMICOLON CONDITION SEMICOLON ID OPERATION ID_NUM C_BRACKETS O_CURLY ST1 C_CURLY
	;

ST1: ST_IF
	| ST_WHILE
	| ST_FOR
	| ACT_CS
	;

CONDITION: ID_NUM CS_EQUAL ID_NUM	{$1 == $3;}
	| ID_NUM CS_GREATER ID_NUM		{$1 > $3}
	| ID_NUM CS_LESS ID_NUM			{$1 < $3}
	| ID_NUM CS_DIFFERENT ID_NUM	{$1 != $3}
	| CONDITION CS_AND CONDITION	{$1 && $3}
	| CONDITION CS_OR CONDITION		{$1 || $3}
	| CS_NOT CONDITION				{!$1}
	| ID_NUM						{$1}
	;

ACT_CS: ID_NUM OPERATION ID_NUM;

PRINTING: S_PRINT STRING	{printf("Printing %s\n", $2);}
	| S_PRINT NUM			{printf("Printing %d\n", $2);}
	;

STRING_OP: ID EQUAL STRING			{$1 = $3}
	| ID EQUAL STRING ADD STRING	{$1 = $3; strcat($1, $5);}
	;

USER_DEF: S_STRUCT ID O_CURLY DATA C_CURLY;

DATA: VARIABLE SEMICOLON DATA
	| VARIABLE SEMICOLON
	;

ID_NUM: ID
	| NUM
%%